<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joe&#39;s blog</title>
  
  <subtitle>emmmmm</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://joeljt.top/"/>
  <updated>2018-03-22T09:17:03.927Z</updated>
  <id>http://joeljt.top/</id>
  
  <author>
    <name>Joe Ljt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内部类</title>
    <link href="http://joeljt.top/2018/03/22/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://joeljt.top/2018/03/22/内部类/</id>
    <published>2018-03-21T16:00:00.000Z</published>
    <updated>2018-03-22T09:17:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>匿名内部类了解一下？其实你每天都在用。</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>将一个类声明在另一个类的内部，则将这个类成为内部类。其与外部类互相访问规则如下：</p><ul><li>内部类可以访问外部类的一切成员，包括私有成员；</li><li>外部类若想访问内部类的成员，则必须声明内部类的实例对象。</li></ul><p>这个规则可以这么理解，外部类和内部类就像父母和孩子：不管孩子要什么，父母总是会满足；但孩子有独立意识后，父母想了解孩子，就必须先得到孩子的同意才可以。</p><p>虽说有了规则限制，但内部类又可以划分为普通内部类，静态内部类以及匿名内部类，因此在实际使用的时候，难免还是会有迷惑的地方。下面，用伪代码进行一下区别展示。</p><h2 id="普通内部类的调用"><a href="#普通内部类的调用" class="headerlink" title="普通内部类的调用"></a>普通内部类的调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value = <span class="number">10</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value = <span class="number">20</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> value = <span class="number">30</span>;</span><br><span class="line">            System.out.print(<span class="string">"this is funcValue -&gt; "</span> + value); <span class="comment">//30</span></span><br><span class="line">            System.out.print(<span class="string">"this is innerValue -&gt; "</span> + <span class="keyword">this</span>.value); <span class="comment">//20</span></span><br><span class="line">            System.out.print(<span class="string">"this is outerValue -&gt; "</span> + Outer.<span class="keyword">this</span>.value); <span class="comment">//10</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 普通内部类，实例化内部类对象时，需要先实例化Outer类对象，然后用Outer类对象实例化Inner类对象</span></span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer().new Inner(); </span><br><span class="line">        inner.showValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态内部类的调用"><a href="#静态内部类的调用" class="headerlink" title="静态内部类的调用"></a>静态内部类的调用</h2><p>当一个类为内部成员时，其便可以像其他内部属性、方法一样，被各种成员修饰符所修饰。</p><p>静态内部类有两个需要注意的点：</p><ul><li>因为被声明为静态，所以只能访问外部类中同样的静态属性、方法等；</li><li>当一个类为静态内部类时，外部类对其的调用方式也会发生不同</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> outStaticValue = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> outValue = <span class="number">11</span>;</span><br><span class="line">     <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.print(<span class="string">"this is static Inner "</span> + outStaticValue); <span class="comment">// 可以访问</span></span><br><span class="line">            System.out.print(<span class="string">"this is static Inner "</span> + outValue); <span class="comment">// 编译不通过</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态内部类，实例化静态内部类对象时，直接通过Outer.Inner获取内部类即可</span></span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer.Inner(); </span><br><span class="line">        inner.showValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类的调用"><a href="#匿名内部类的调用" class="headerlink" title="匿名内部类的调用"></a>匿名内部类的调用</h2><p>我们都熟悉匿名对象的用法，最简单的如 new Object().toString()，便是匿名对象的基本使用了。</p><p>同理，匿名内部类也是类似的。</p><p>但是也有不同，那就是声明匿名内部类，要求类必须继承一个抽象类或者实现一个接口。</p><p>下面看一下正常逻辑实现，以及匿名内部类实现的代码示例。</p><ul><li>正常逻辑实现调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">extends</span> <span class="title">ParentClass</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">new</span> Inner().show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正常逻辑实现调用</span></span><br><span class="line">        <span class="keyword">new</span> Outer().func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名内部类实现方式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">new</span> ParentClass()&#123;</span><br><span class="line">            <span class="meta">@override</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Outer().func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>其实匿名内部类很简单，说到底就是new Parent(){实现父类或者接口的抽象方法}</p><p>是不是觉得很眼熟？没错，我们基本上每天都在用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>View.OnClickListener是一个抽象接口，我们这种实现方式，其实就是匿名内部类的实现。</p><h2 id="定义在方法中的内部类"><a href="#定义在方法中的内部类" class="headerlink" title="定义在方法中的内部类"></a>定义在方法中的内部类</h2><p>除了以上三种常见的形态，内部类还可以声明在局部，比如方法体内部：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">InnerFunc</span>()</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">showMsg</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">new</span> InnerFunc().showMsg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Outer().show(); <span class="comment">// 这样就可以调用定义在方法内部的类了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种形式在日常开发中使用并不多，至少我没有用过。说到这里，感觉这个有点类似于python的在方法中声明方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outerFunc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">innerFunc</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this is innerFunc"</span></span><br><span class="line">    <span class="keyword">return</span> innerFunc</span><br></pre></td></tr></table></figure><p>内部类总结大概就要结束啦，以后想到再补充。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;匿名内部类了解一下？其实你每天都在用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="http://joeljt.top/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java中多态的具体应用</title>
    <link href="http://joeljt.top/2018/03/09/java%E4%B8%AD%E5%A4%9A%E6%80%81%E7%9A%84%E5%85%B7%E4%BD%93%E5%BA%94%E7%94%A8/"/>
    <id>http://joeljt.top/2018/03/09/java中多态的具体应用/</id>
    <published>2018-03-08T16:00:00.000Z</published>
    <updated>2018-03-09T10:03:52.981Z</updated>
    
    <content type="html"><![CDATA[<p>实际使用多态时，关于成员变量和成员函数的调用，在编译期和运行时有所不同，具体代码示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 父类</span><br><span class="line">public class Parent &#123;</span><br><span class="line">    public int aInt = -1;</span><br><span class="line">    public void func1() &#123;</span><br><span class="line">        System.err.print(&quot; Parent func1 &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void func2() &#123;</span><br><span class="line">        System.err.print(&quot; Parent func2 &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 子类</span><br><span class="line">public class Child extends Parent &#123;</span><br><span class="line">    public int aInt = 1;</span><br><span class="line">    public void func1() &#123;</span><br><span class="line">        System.err.print(&quot; Child func1 &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void func3() &#123;</span><br><span class="line">        System.err.print(&quot; Child func3 &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// test main()</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Child child = new Child();</span><br><span class="line">    child.func1();</span><br><span class="line">    child.func2();</span><br><span class="line">    child.func3();</span><br><span class="line"></span><br><span class="line">    Parent parent = new Child();</span><br><span class="line">    parent.func1();</span><br><span class="line">    parent.func2();</span><br><span class="line">    parent.func3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，将对象声明为Child对象时，三个方法都编译通过，且输入结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Child func1</span><br><span class="line">Parent func2</span><br><span class="line">Child func3</span><br></pre></td></tr></table></figure></p><p>Child类重写了父类的func1()方法，则在运行时匹配了子类自身的重写方法，即，「运行时遵循右侧声明」。<br>但是，如果将对象声明为Parent对象时，parent.fun3()则会报错，因为「编译期遵循左侧实例」，当前对象被声明为Parent实例，而Parent中没有func3()方法，所以编译不通过。同时也正因为「运行时遵循右侧声明」，所以其运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Child func1 // 尽管声明为Parent实例，但实际调用Child的方法</span><br><span class="line">Parent func2</span><br></pre></td></tr></table></figure></p><p>综上所述，在多态使用时，成员函数遵循两个原则，即「编译期遵循左侧实例，运行时遵循右侧声明」</p><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// test main()</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Parent parent = new Child();</span><br><span class="line">    Child child = new Child();</span><br><span class="line">    System.err.println(parent.aInt);</span><br><span class="line">    System.err.println(child.aInt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><p>可以发现，打印结果与成员函数有所不同。因为如果是成员函数，运行时遵循右侧声明的话，打印结果应该相等，同为1才对。因此，成员变量在多态情境下的使用，无论编译还是运行，通通遵循左侧实例。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>成员函数<br>编译时遵循左侧实例，运行时遵循右侧声明</li><li>成员变量<br>编译或者运行一律遵循左侧实例</li></ul><p>其实也比较好理解，编译期间，当前类下不存在的成员函数或成员变量，肯定是无法被实例对象获取到的；<br>而在运行时，java中子类可以重写父类的方法，因此成员函数运行时会正确指向子类的方法，但是，子类并不可以重写父类的变量，当子类与父类有同名变量时，需要使用this和super关键字进行区分。在这种情况下，成员变量的访问则不可能像方法一样使用多态访问，因此只能是遵循左侧的实例了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实际使用多态时，关于成员变量和成员函数的调用，在编译期和运行时有所不同，具体代码示例&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s
      
    
    </summary>
    
    
      <category term="java基础" scheme="http://joeljt.top/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>抽象类和接口的区别</title>
    <link href="http://joeljt.top/2018/03/09/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://joeljt.top/2018/03/09/抽象类和接口的区别/</id>
    <published>2018-03-08T16:00:00.000Z</published>
    <updated>2018-03-09T10:02:51.330Z</updated>
    
    <content type="html"><![CDATA[<p>先来一个问题，java中允许多继承吗？</p><h2 id="抽象类-单继承"><a href="#抽象类-单继承" class="headerlink" title="抽象类 - 单继承"></a>抽象类 - 单继承</h2><ul><li>关键字为abstract, extends, 被类所继承</li><li>不可以被final修饰</li><li>抽象方法不可以被private修饰，但其他三个不受限制</li><li>抽象方法一定存在于抽象类中，但是抽象类中不一定有抽象方法</li><li>抽象类的子类必须全部重写抽象方法，如果只重写部分抽象方法，则该子类同样为抽象方法</li><li>抽象类中不一定全部都是抽象方法，方法可以有方法体</li><li>抽象类不可以实例化对象</li><li>抽象类可以实现接口，因为接口的内容也都是抽象的</li></ul><h2 id="接口-多实现"><a href="#接口-多实现" class="headerlink" title="接口 - 多实现"></a>接口 - 多实现</h2><ul><li>关键字为interface, implements, 被类所实现</li><li>同样不可以被final修饰</li><li>接口只允许三种成员存在：<ol><li>公共的静态常量 public final static</li><li>公共的抽象方法 public abstract</li><li>静态内部类 static class</li></ol></li><li>由上可知，接口的作用域必须为public</li><li>接口的抽象方法也必须全部被实现类所重写，否则实现类为抽象类</li><li>不同的接口之间为继承关系，而且可以多继承</li><li>接口不可以实例化对象</li><li>接口不可以继承抽象类，因为抽象类中有可能存在非抽象方法，与接口的概念相悖</li></ul><h2 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h2><ul><li>每个类只能继承一个抽象类，但是可以实现多个接口</li><li>抽象类可以有非抽象方法，接口全部为抽象方法</li><li>从作用域角度看，抽象类中抽象方法不能为private，而接口强制为public abstract</li><li>抽象类可以实现接口，但是接口不能继承抽象类</li><li>不同的接口可以多继承，但是不同的抽象类只能单继承</li></ul><p>以上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先来一个问题，java中允许多继承吗？&lt;/p&gt;
&lt;h2 id=&quot;抽象类-单继承&quot;&gt;&lt;a href=&quot;#抽象类-单继承&quot; class=&quot;headerlink&quot; title=&quot;抽象类 - 单继承&quot;&gt;&lt;/a&gt;抽象类 - 单继承&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;关键字为abstract,
      
    
    </summary>
    
    
      <category term="java基础" scheme="http://joeljt.top/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
